#ifndef DATA_H#define DATA_H#include <stdio.h>#include <stdlib.h>#include <string.h>#include "label.h"#include "data.h"#include "entry_extern.h"#include "general_functions.h"#include "instructions.h"#define BINARY_SIZE 2  /* Assuming the binary representation fits in 2 bytes *//* Data structure for storing character data */typedef struct Data {	int number;                  /* The number */	int lineNumber;              /* The line number where the number is found */	unsigned int numberValue : 15; /* Binary representation of the number */    struct Data* next;           /* Pointer to the next node in the list */} Data;/* Data structure for storing character data */typedef struct CharData {	char character;                /* The character */	int lineNumber;                /* The line number where the character is found */	unsigned char asciiValue;      /* ASCII value of the character */	struct CharData* next;         /* Pointer to the next node in the list */} CharData;/** * @brief Creates a new Data object. *  * @param number The number to store in the Data object. * @param lineNumber The line number where the number is found. * @return Data* A pointer to the newly created Data object. */Data* createData(int number, int lineNumber);/** * @brief Adds a new Data object to the list. *  * @param head Pointer to the head of the list. * @param number The number to add to the list. * @param lineNumber The line number where the number is found. */void addData(Data** head, int number, int lineNumber);/** * @brief Frees all memory allocated for the Data list. *  * @param head Pointer to the head of the list. */void freeDataList(Data* head);/** * @brief Prints the entire Data list. *  * @param head Pointer to the head of the list. */void printDataList(Data* head);/** * @brief Creates a new CharData object. *  * @param character The character to store in the CharData object. * @param lineNumber The line number where the character is found. * @return CharData* A pointer to the newly created CharData object. */CharData* createCharData(char character, int lineNumber);/** * @brief Adds a new CharData object to the list. *  * @param head Pointer to the head of the list. * @param character The character to add to the list. * @param lineNumber The line number where the character is found. */void addCharData(CharData** head, char character, int lineNumber);/** * @brief Prints the entire CharData list. *  * @param head Pointer to the head of the list. */void printCharDataList(CharData* head);/** * @brief Frees all memory allocated for the CharData list. *  * @param head Pointer to the head of the list. */void freeCharDataList(CharData* head);/** * @brief Checks if a given number is within the valid range. *  * @param number The number to check. * @return int 1 if the number is valid, 0 otherwise. */int isValidNumber(int number);/** * @brief Checks if the provided line is a valid string according to specific rules. *  * @param line The string to check. * @param lineNumber The line number where the string is found. * @param file_name The name of the file being processed. * @return int 1 if the string is valid, 0 otherwise. */int isValidString(const char* line, int lineNumber, char* file_name);/** * @brief Processes a valid line of text by extracting characters and adding them to the data array. *  * @param line The line of text to process. * @param head Pointer to the head of the CharData list. * @param lineNumber The line number where the line is found. * @return int The updated line number after processing. */int processValidLine(const char* line, CharData** head, int lineNumber);/** * @brief Checks if the provided string represents a valid number. *  * @param str The string to check. * @return int 1 if the string is a valid number, 0 otherwise. */int isNumber(const char* str);/** * @brief Processes a line of numbers separated by commas. *  * @param line The line of numbers to process. * @param lineNumber The line number where the line is found. * @param file_name The name of the file being processed. * @param no_errors Pointer to a Bool indicating if there are no errors. * @return char* A formatted string with spaces instead of commas. */char* processNumberLine(const char* line, int lineNumber, char* file_name, Bool* no_errors);/** * @brief Removes the surrounding double quotes from a given string. *  * @param str The string to remove quotes from. * @return char* A new string without the surrounding quotes. */char* removeQuotes(const char* str);#endif /* DATA_H */